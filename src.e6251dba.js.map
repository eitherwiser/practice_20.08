{"version":3,"sources":["index.js"],"names":["refs","commentsList","document","querySelector","container","form","formBtn","inputName","inputComment","checkSpamBtn","onCheckSpam","e","target","textContent","dataset","checked","onLoadPage","onDeleteComment","nodeName","fetch","id","method","sendData","preventDefault","name","data","value","comment","body","JSON","stringify","headers","status","reset","flag","response","json","withoutSpam","filter","toLowerCase","includes","renderComments","createTemplate","callback","markup","innerHTML","map","join","nodes","forEach","el","window","addEventListener"],"mappings":";AAAA,MAAMA,EAAO,CACXC,aAAcC,SAASC,cAAc,kBACrCC,UAAWF,SAASC,cAAc,cAClCE,KAAMH,SAASC,cAAc,SAC7BG,QAASJ,SAASC,cAAc,aAChCI,UAAWL,SAASC,cAAc,eAClCK,aAAcN,SAASC,cAAc,kBACrCM,aAAcP,SAASC,cAAc,UASvC,SAASO,EAAYC,GAEfA,GADJA,EAAEC,OAAOC,YAAc,iBACnBF,EAAEC,OAAOE,QAAQC,QAInB,OAHAJ,EAAEC,OAAOE,QAAQC,QAAU,GAC3BJ,EAAEC,OAAOC,YAAc,kBACvBG,EAAWL,GAAG,GAGhBA,EAAEC,OAAOE,QAAQC,QAAU,OAC3BC,EAAWL,GAAG,GAIhB,eAAeM,EAAgBN,GACH,WAAtBA,EAAEC,OAAOM,iBAGPC,qEAC2DR,EAAEC,OAAOQ,KACxE,CACEC,OAAQ,WAGZL,KAIF,eAAeM,EAASX,GACtBA,EAAEY,iBACIC,MAEAC,EAAO,CACXD,KAHWxB,EAAKO,UAAUmB,MAI1BC,QAHc3B,EAAKQ,aAAakB,OAiBd,aAZDP,MACjB,8DACA,CACEE,OAAQ,OACRO,KAAMC,KAAKC,UAAU,IAChBL,IAELM,QAAS,CACS,eAAA,uBAIbC,SACPC,EAAMjC,EAAKQ,aAAcR,EAAKO,WAC9BS,KAKJ,eAAeA,EAAWL,EAAGuB,GACrBC,MAAAA,QAAiBhB,MACrB,+DAEIM,QAAaU,EAASC,OACtBC,EAAcZ,EAAKa,OAAO,EAAGX,QAAAA,MAE9BA,EAAQY,cAAcC,SAAS,UAC/Bb,EAAQY,cAAcC,SAAS,SAGhCN,GAAAA,EAAAA,CAOFO,EAAeC,EANEjB,EAAKa,OAAO,EAAGX,QAAAA,KAE5BA,EAAQY,cAAcC,SAAS,SAC/Bb,EAAQY,cAAcC,SAAS,eAMrCC,EAAeC,EAAgBL,GAIjC,SAASI,EAAeE,EAAUlB,GAC1BmB,MAAAA,EAASD,EAASlB,GACxBzB,EAAKC,aAAa4C,UAAYD,EAIhC,SAASF,EAAejB,GACfA,OAAAA,EACJqB,IAAI,EAAGnB,QAAAA,EAASH,KAAAA,EAAMJ,GAAAA,0BAEbI,sBACDG,8BACSP,oDAGjB2B,KAAK,IAIV,SAASd,KAASe,GACf,IAAGA,GAAOC,QAASC,IAClBA,EAAGxB,MAAQ,KA1GfyB,OAAOC,iBAAiB,mBAAoBpC,GAC5ChB,EAAKK,KAAK+C,iBAAiB,SAAU9B,GACrCtB,EAAKC,aAAamD,iBAAiB,QAASnC,GAC5CjB,EAAKS,aAAa2C,iBAAiB,QAAS1C","file":"src.e6251dba.js","sourceRoot":"../src","sourcesContent":["const refs = {\n  commentsList: document.querySelector(\".comments-list\"),\n  container: document.querySelector(\".container\"),\n  form: document.querySelector(\".form\"),\n  formBtn: document.querySelector(\".form-btn\"),\n  inputName: document.querySelector(\".input-name\"),\n  inputComment: document.querySelector(\".input-comment\"),\n  checkSpamBtn: document.querySelector(\".spam\"),\n};\n\nwindow.addEventListener(\"DOMContentLoaded\", onLoadPage);\nrefs.form.addEventListener(\"submit\", sendData);\nrefs.commentsList.addEventListener(\"click\", onDeleteComment);\nrefs.checkSpamBtn.addEventListener(\"click\", onCheckSpam);\n\n// функция переключения со спама на обычные комменты и наоборот\nfunction onCheckSpam(e) {\n  e.target.textContent = \"Check comments\";\n  if (e.target.dataset.checked) {\n    e.target.dataset.checked = \"\";\n    e.target.textContent = \"Check spam\";\n    onLoadPage(e, false);\n    return;\n  }\n  e.target.dataset.checked = \"true\";\n  onLoadPage(e, true);\n}\n\n// функция удаления комментов\nasync function onDeleteComment(e) {\n  if (e.target.nodeName !== \"BUTTON\") {\n    return;\n  }\n  await fetch(\n    `https://61222a8ff5849d0017fb440b.mockapi.io/api/v1/comments/${e.target.id}`,\n    {\n      method: \"DELETE\",\n    }\n  );\n  onLoadPage();\n}\n\n// функция отправки данных на сервер и обновления ui\nasync function sendData(e) {\n  e.preventDefault();\n  const name = refs.inputName.value;\n  const comment = refs.inputComment.value;\n  const data = {\n    name,\n    comment,\n  };\n  const resp = await fetch(\n    \"https://61222a8ff5849d0017fb440b.mockapi.io/api/v1/comments\",\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        ...data,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  );\n  if (resp.status === 201) {\n    reset(refs.inputComment, refs.inputName);\n    onLoadPage();\n  }\n}\n\n// функция которая рендерит список после загрузки дома\nasync function onLoadPage(e, flag) {\n  const response = await fetch(\n    \"https://61222a8ff5849d0017fb440b.mockapi.io/api/v1/comments\"\n  );\n  const data = await response.json();\n  const withoutSpam = data.filter(({ comment }) => {\n    return (\n      !comment.toLowerCase().includes(\"spam\") &&\n      !comment.toLowerCase().includes(\"sale\")\n    );\n  });\n  if (flag) {\n    const withSpam = data.filter(({ comment }) => {\n      return (\n        comment.toLowerCase().includes(\"spam\") ||\n        comment.toLowerCase().includes(\"sale\")\n      );\n    });\n    renderComments(createTemplate, withSpam);\n    return;\n  }\n  renderComments(createTemplate, withoutSpam);\n}\n\n// функция для рендера комментов\nfunction renderComments(callback, data) {\n  const markup = callback(data);\n  refs.commentsList.innerHTML = markup;\n}\n\n// функция для создания разметки списка\nfunction createTemplate(data) {\n  return data\n    .map(({ comment, name, id }) => {\n      return `<li>\n        <h3>${name}</h3>\n        <p>${comment}</p>\n        <button id=\"${id}\" class=\"delete\">delete</button>\n        </li>`;\n    })\n    .join(\"\");\n}\n\n// reset полей формы\nfunction reset(...nodes) {\n  [...nodes].forEach((el) => {\n    el.value = \"\";\n  });\n}"]}